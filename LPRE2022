library(Runuran)
library(dfoptim)
#X,Y的产生
datafun = function(n, par, rho, error.type ="lnorm"){
  beta0 = par
  p = length(beta0)
  xx = matrix(rnorm(n*p,0,1), ncol=p)
  if(rho==0){ corrmat = diag(rep(1, p)) }else{ corrmat = toeplitz(rho^(1:p-1)) }
  cholmat = chol(corrmat)
  X = xx%*%cholmat
  if(error.type=="lnorm")   error = rlnorm(n, 0, 1)
  if(error.type=="lunif")   error = exp(runif(n, -2, 2))
  if(error.type=="dfeff"){ 
    logdenfun = function(u){ -abs(1-u)-abs(1-1/u)-log(u) }
    gen = ars.new(logpdf=logdenfun, lb=0.0000001, ub=Inf)
    error = ur(gen, n)
  }
  Y = exp(X%*%beta0)*error
  list(X=X, Y=Y)
}

#huber-LPRE model 
rho_m<-function(X,M){
  rho=X^2*(abs(X)<=M)+(2*M*abs(X)-M^2)*(abs(X)>M)
  rho
}
ln_product_rho<-function(X,Y,beta,M){
  temp0 = exp(X%*%beta)/Y
  u=1-temp0
  v=1-1/temp0
  er0 =sum(rho_m(t(abs(u))%*%(abs(v)),M))
  er0
}

#huber-LPRE model计算及参数M的选取
oraclefun_rho = function(X,Y){
  n = nrow(X)
  p = ncol(X)
  beta.est0 = solve(t(X)%*%X)%*%t(X)%*%(log(Y))
  M=c(1.1,1.2,1.5,2,2.5,3,5,8,10,13,15,20,25,30,50)
  lenm=length(M)
  lare=matrix(nrow=n,ncol=lenm)
  m=10
  mm=round(n/m)
  for(j in 1:lenm){
    M1=M[j]
    for(i in 0:m-1){
      Yi=Y;Xi=X
      yi=Yi[(i*mm+1):((i+1)*mm)];xi=Xi[(i*mm+1):((i+1)*mm),]
      Yi=Yi[-((i*mm+1):((i+1)*mm))];Xi=Xi[-((i*mm+1):((i+1)*mm)),]
      hatbeta.est = nmk(par=beta.est0, function(beta) ln_product_rho(Xi,Yi,beta,M1),control=list(tol=1e-06))$par
      hatyi= exp(xi%*%hatbeta.est)
      lare[(i*mm+1):((i+1)*mm),j]=t(yi-hatyi)%*%(yi-hatyi)+(1/mm)
    }
  }
  LARE=colMeans(lare) 
  M.opt=M[which.min(LARE)]
  res1= nmk(par=beta.est0, function(beta) ln_product_rho(X,Y,beta,M.opt), control=list(tol=1e-06))
  beta.est = res1$par
  list(beta.est=beta.est, M.opt=M.opt)
}

#SCAD penalty function
p_lambda_d<-function(n,beta0,beta,a = 3.7,lambda){
  c1=lambda*(abs(beta0)<=lambda)+(abs(beta0)>lambda)*(a*lambda-abs(beta0))*(a*lambda>abs(beta0))/(a-1)
  c2=(c1/abs(beta0))*beta^2/2
  c3=n*sum(c2)
  c3
}

#huber-LPRE-SCAD model计算及参数lambda的选取
Q_n_rho=function(X,Y,a=3.7,lambda){
  A=oraclefun_rho(X,Y)
  beta.init=A$beta.est
  M=A$M.opt
  n=nrow(X)
  p=length(beta.init)
  lambda=c(0.01,0.02,0.03,0.05,0.08,0.1,0.2,0.3,0.5,0.8,1,2,5)
  lenlam=length(lambda)
  lare=matrix(nrow=n,ncol=lenlam)
  m=10
  mm=round(n/m)
  for(j in 1:lenlam){
    lambda1=lambda[j]
    for(i in 0:m-1){
      Yi=Y;Xi=X
      yi=Yi[(i*mm+1):((i+1)*mm)];xi=Xi[(i*mm+1):((i+1)*mm),]
      Yi=Yi[-((i*mm+1):((i+1)*mm))];Xi=Xi[-((i*mm+1):((i+1)*mm)),]
      hatbeta.est=nmk(par=beta.init, function(beta) ln_product_rho(Xi,Yi,beta,M)+p_lambda_d(n,beta.init,beta,a=3.7,lambda1), control=list(tol=1e-06))$par
      hatyi= exp(xi%*%hatbeta.est)
      lare[(i*mm+1):((i+1)*mm),j]=t(yi-hatyi)%*%(yi-hatyi)+(1/mm)
    }
  }
  LARE=colMeans(lare)
  lambda.opt=lambda[which.min(LARE)]
  res2= nmk(par=beta.init, function(beta) ln_product_rho(X,Y,beta,M)+p_lambda_d(n,beta.init,beta,a=3.7,lambda.opt), control=list(tol=1e-06))
  beta.est = 0*(abs(res2$par)<0.1)+res2$par*(abs(res2$par)>0.1)
  list(beta.est=beta.est, lambda.opt=lambda.opt)
}

#测试
test<-function(N,n,p)
{
  set.seed(123)
  beta0=rep(0,p)
  beta0[1:5] = c(2,1,0.8,0.5,0.3)#initial beta
  rho=0.5
  nonzero.ind=which(beta0!=0)
  zero.ind=which(beta0==0)
  of=rep(0,N)
  uf=rep(0,N)
  cf=rep(0,N)
  tp=rep(NA,N)
  fp=rep(NA,N)
  ms=rep(NA,N)
  err1=rep(NA,N)
  err2=rep(NA,N)
  mse1=rep(NA,N)
  mse2=rep(NA,N)
  mme1=rep(NA,N)
  mme2=rep(NA,N)
  m.opt=rep(NA,N)
  lambda_1=rep(NA,N)
  time=NULL
  cat("begin!\n")
  for(j in 1:N){
    t1=Sys.time()
    data1<-datafun(n,beta0,rho,error.type ="lnorm")
    X<-data1$X
    Y<-data1$Y
    M=c(1.1,1.2,1.5,2,2.5,3,5,8,10,13,15,20,25,30,50)
    A=oraclefun_rho(X,Y)
    beta1<-A$beta.est
    M<-A$M.opt
    lambda=c(0.01,0.02,0.03,0.05,0.08,0.1,0.2,0.3,0.5,0.8,1,2,5)
    B=Q_n_rho(X,Y,a=3.7,lambda)
    lambda<-B$lambda.opt
    beta2<-B$beta.est
    nz.est.ind=which(beta2!=0)
    z.est.ind=which(beta2==0)
    tp[j]=length(intersect(nonzero.ind, nz.est.ind))
    fp[j]=length(intersect(zero.ind, nz.est.ind))
    ms[j]=length(nz.est.ind)
    err1[j]<-max(abs(beta1-beta0))
    err2[j]<-max(abs(beta2-beta0))
    mse1[j]<-sum((beta1-beta0)^2)
    mse2[j]<-sum((beta2-beta0)^2)
    mme1[j] = t(beta1-beta0)%*%(t(X)%*%X)%*%(beta1-beta0)/nrow(X)
    mme2[j] = t(beta2-beta0)%*%(t(X)%*%X)%*%(beta2-beta0)/nrow(X)
    if(tp[j]==length(nonzero.ind)&length(nz.est.ind)>length(nonzero.ind))  of[j]=1
    if(tp[j]<length(nonzero.ind))  uf[j]=1
    if(tp[j]==length(nonzero.ind)&ms[j]==length(nonzero.ind))  cf[j]=1
    m.opt[j]<- M
    lambda_1[j]<-lambda
    t2=Sys.time()
    time=c(time,(t2-t1))
    cat("repeat",j,"\n",t2-t1,'\n',m.opt[j],"\n",lambda_1[j],"\n")
  }
  cat("end!\n")
  ERR1=median(err1)
  ERR1sd = (quantile(err1, probs=0.75)-quantile(err1, probs=0.25))/1.34
  ERR2=median(err2)
  ERR2sd = (quantile(err2, probs=0.75)-quantile(err2, probs=0.25))/1.34
  MSE1=median(mse1)
  MSE1sd = (quantile(mse1, probs=0.75)-quantile(mse1, probs=0.25))/1.34
  MSE2=median(mse2)
  MSE2sd = (quantile(mse2, probs=0.75)-quantile(mse2, probs=0.25))/1.34
  MME1=median(mme1)
  MME1sd = (quantile(mme1, probs=0.75)-quantile(mme1, probs=0.25))/1.34
  MME2=median(mme2)
  MME2sd = (quantile(mme2, probs=0.75)-quantile(mme2, probs=0.25))/1.34
  TIME=mean(time)
  TIMEsd = (quantile(time, probs=0.75)-quantile(time, probs=0.25))/1.34
  TP=mean(tp)
  TPsd = (quantile(tp, probs=0.75)-quantile(tp, probs=0.25))/1.34
  FP=mean(fp)
  FPsd = (quantile(fp, probs=0.75)-quantile(fp, probs=0.25))/1.34 
  MS=mean(ms)
  MSsd = (quantile(ms, probs=0.75)-quantile(ms, probs=0.25))/1.34
  OFprop=sum(of)/N
  OFsd = (quantile(of, probs=0.75)-quantile(of, probs=0.25))/1.34
  UFprop=sum(uf)/N
  UFsd = (quantile(uf, probs=0.75)-quantile(uf, probs=0.25))/1.34
  CFprop=sum(cf)/N
  CFsd = (quantile(cf, probs=0.75)-quantile(cf, probs=0.25))/1.34
  M=mean(m.opt)
  Msd = (quantile(m.opt, probs=0.75)-quantile(m.opt, probs=0.25))/1.34
  LAMBDA=mean(lambda_1)
  LAMBDAsd = (quantile(lambda_1, probs=0.75)-quantile(lambda_1, probs=0.25))/1.34
  ressum=rbind(cbind(ERR1,ERR2,MSE1,MSE2,MME1,MME2,TIME,TP,FP,MS,OFprop,UFprop,CFprop,M,LAMBDA),
               cbind(ERR1sd,ERR2sd,MSE1sd,MSE2sd,MME1sd,MME2sd,TIMEsd,TPsd,FPsd,MSsd,OFsd,UFsd,CFsd,Msd,LAMBDAsd))
  colnames(ressum)=c("LPRE-huber-err","LPRE-huber-SCAD-err","LPRE-huber-mse","LPRE-huber-SCAD-mse","LPRE-huber-mme","LPRE-huber-SCAD-mme","time","TP","FP",
                     "MS","OF","UF","CF","M","lambda")
  list(ressum=ressum,m.opt=m.opt,lambda_1=lambda_1)
}

#test(100,800,19)
